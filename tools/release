#!/usr/bin/env python
import argparse
import re
import subprocess
import sys
from pathlib import Path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("version")
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args()

    version = args.version
    dry_run = args.dry_run

    if version.startswith("v"):
        version = version[1:]

    current_version = get_current_version()
    if not is_next_version(get_current_version(), version):
        raise Exception(
            f"{version} does not come after current version {current_version}"
        )

    if not re.match(r"^[0-9]+\.[0-9]+\.[0-9]+$", version):
        raise Exception(f"not a well-formatted version: {version}")

    f_init = "batchop/__init__.py"
    f_toml = "pyproject.toml"

    replace_in_file(r'__version__ = "(.+?)"', f'__version__ = "{version}"', f_init)
    replace_in_file(r'version = "(.+?)"', f'version = "{version}"', f_toml)

    sh(["git", "status"])
    sh(["git", "diff", f_init, f_toml])
    confirm("git commit? ")
    sh(["git", "add", f_init, f_toml], dry_run=dry_run)
    sh(["git", "commit", "-m", f"version {version}"], dry_run=dry_run)
    confirm("git push? ")
    sh(["git", "push"], dry_run=dry_run)
    confirm("publish to pypi? ")
    sh(["poetry", "build"])
    sh(["poetry", "publish"], dry_run=dry_run)

    if dry_run:
        print()
        print("Dry run: version was not actually released.")
    else:
        print()
        print(
            "ATTENTION: Please navigate to https://github.com/iafisher/batchop/releases"
        )
        print("           and create a new release in GitHub.")


def is_next_version(va, vb):
    val = version_to_list(va)
    vbl = version_to_list(vb)

    assert len(val) == 3
    assert len(vbl) == 3

    return (
        increment_version(val, 2) == vbl
        or increment_version(val, 1) == vbl
        or increment_version(val, 0) == vbl
    )


def increment_version(v, place):
    assert 0 <= place < len(v)
    vcopy = v.copy()
    vcopy[place] += 1
    for i in range(place + 1, len(v)):
        vcopy[i] = 0

    return vcopy


def version_to_list(v):
    return [int(x) for x in v.split(".")]


def get_current_version():
    # version = "0.1.2"
    text = Path("pyproject.toml").read_text()
    m = re.search(r'version *= *"(.+?)"', text)
    if not m:
        raise Exception("could not find current version")

    return m.group(1)


def replace_in_file(pattern, replacement, fname):
    text = Path(fname).read_text()
    text2 = re.sub(pattern, replacement, text)
    Path(fname).write_text(text2)


def sh(args, dry_run=False):
    if dry_run:
        subprocess.run(["echo"] + args, capture_output=False, check=True)
    else:
        subprocess.run(args, capture_output=False, check=True)


def confirm(prompt):
    r = input(prompt).strip().lower()
    if r == "y" or r == "yes":
        return
    else:
        print("Aborted.")
        sys.exit(1)


if __name__ == "__main__":
    main()
